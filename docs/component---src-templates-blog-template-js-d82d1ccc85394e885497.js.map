{"version":3,"sources":["webpack:///./src/templates/blogTemplate.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/layout.tsx","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js"],"names":["__webpack_require__","r","__webpack_exports__","d","Template","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_layout__WEBPACK_IMPORTED_MODULE_1__","_components_seo__WEBPACK_IMPORTED_MODULE_2__","_ref","markdownRemark","data","frontmatter","html","a","createElement","title","className","date","Fragment","dangerouslySetInnerHTML","__html","m","module","exports","require","default","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","loader","enqueue","React","createContext","ActiveTab","Layout","props","_useState","useState","Blog","activeTab","setTab","useEffect","window","location","pathname","includes","Projects","About","react__WEBPACK_IMPORTED_MODULE_2__","gatsby__WEBPACK_IMPORTED_MODULE_3__","to","children","ProdPageRenderer","pageResources","InternalPageRenderer","Object","assign","json","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat","link","rel","href","defaultProps"],"mappings":"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","file":"component---src-templates-blog-template-js-d82d1ccc85394e885497.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\n\nexport default function Template({\n  data // this prop will be injected by the GraphQL query below.\n}) {\n  const { markdownRemark } = data; // data.markdownRemark holds our post data\n  const { frontmatter, html } = markdownRemark;\n  return (\n    <Layout>\n      <SEO title='Home' />\n      <div className='blog'>\n        <div className='blog-post-title'>\n          <h1>{frontmatter.title} </h1>\n          {frontmatter.date ? <h4>{frontmatter.date}</h4> : <></>}\n        </div>\n        <div className='blog-post-content' dangerouslySetInnerHTML={{ __html: html }} />\n      </div>\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        path\n        title\n      }\n    }\n  }\n`;\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import { useState, useEffect } from \"react\"\nimport * as React from 'react'\nimport { Link } from \"gatsby\"\nimport \"./layout.scss\"\nenum ActiveTab {\n  Blog = 'blog',\n  Projects = 'projects',\n  About = 'about'\n}\n\nconst Layout = (props: React.Props<{}>): JSX.Element => {\n  const [activeTab, setTab] = useState(ActiveTab.Blog)\n\n\n  useEffect(() => {\n    if (window.location.pathname.includes(ActiveTab.Projects)) setTab(ActiveTab.Projects)\n    if (window.location.pathname.includes(ActiveTab.About)) setTab(ActiveTab.About)\n  }, []);\n  return (\n    <>\n      <header>\n        <div className='header-content'>\n          <nav>\n            <Link to='/'><div className={`navitem ${activeTab == ActiveTab.Blog ? 'active' : ''}`}>Blog</div></Link>\n            <Link to='/projects'><div className={`navitem ${activeTab == ActiveTab.Projects ? 'active' : ''}`}>Projects</div></Link>\n            <Link to='/about'><div className={`navitem ${activeTab == ActiveTab.About ? 'active' : ''}`}>About</div></Link>\n          </nav>\n        </div>\n      </header>\n      <div className=\"container\">\n        <div className=\"main-wrapper\">\n          {props.children}\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default Layout\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang\n      }}\n      title={title}\n      titleTemplate={`${site.siteMetadata.title} - %s`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription\n        },\n        {\n          property: `og:title`,\n          content: title\n        },\n        {\n          property: `og:description`,\n          content: metaDescription\n        },\n        {\n          property: `og:type`,\n          content: `website`\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author\n        },\n        {\n          name: `twitter:title`,\n          content: title\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription\n        }\n      ].concat(meta)}\n      link={[\n        {\n          rel: 'stylesheet',\n          href: 'https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css'\n        }\n      ]}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired\n};\n\nexport default SEO;\n"],"sourceRoot":""}